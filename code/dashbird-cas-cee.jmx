<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="dashbird-cas-cee" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Not A(Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;121&quot;, &quot;Chromium&quot;;v=&quot;121&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">dashbird-cee.hbssims-dev.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">cas.hbsstg.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value">lifeconnect-cee.hbssims-dev.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUp" elementType="Argument">
            <stringProp name="Argument.name">rampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Users/mhaidar/OneDrive - Harvard Business School/Desktop/Simulations/Dashbird/Dashbird_Load_Test/August_November_2024/user/learners.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">learners, name</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Initial Thread Group" enabled="false">
        <stringProp name="ThreadGroup.num_threads">${numUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashbird CEE ${learners}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/hbs/sim/lifeconnectloadtest</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Countdown Extractor ${learners}" enabled="true">
          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
          <stringProp name="RegexExtractor.refname">countdownValue</stringProp>
          <stringProp name="RegexExtractor.regex">onload=&quot;startCountdown\((\d+)\)&quot;</stringProp>
          <stringProp name="RegexExtractor.template">$1$</stringProp>
          <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
          <stringProp name="RegexExtractor.match_number">1</stringProp>
          <stringProp name="Sample.scope">all</stringProp>
        </RegexExtractor>
        <hashTree/>
        <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer ${learners}" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">//// Retrieve the countdown value from JMeter variables
//String countdownValue = vars.get(&quot;countdownValue&quot;)
//
//// Output the countdown value to the console
//log.info(&quot;Extracted countdown value: &quot; + countdownValue)

int waitTime = Integer.parseInt(vars.get(&quot;countdownValue&quot;));
return waitTime * 1000; // Convert seconds to milliseconds</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Timer>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler ${learners}" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&apos;${countdownValue}&apos; == &apos;NOT_FOUND&apos;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="If Debug Sampler ${learners}" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action ${learners}" enabled="true">
            <intProp name="ActionProcessor.action">5</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\mhaidar\OneDrive - Harvard Business School\Desktop\Simulations\Dashbird\Dashbird_Load_Test\August_November_2024\results\SummaryReport_results_${__time(yyyyMMdd-HHmmss)}_${numUsers}_users_${rampUp}_RampUp.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree-Errors" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Mohsen Thread Group" enabled="false">
        <stringProp name="ThreadGroup.num_threads">${numUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${name}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">Transaction Controller</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${name} Dashbird CEE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/hbs/sim/lifeconnectloadtest</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="${name} Countdown Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">countdownValue</stringProp>
              <stringProp name="RegexExtractor.regex">onload=&quot;startCountdown\((\d+)\)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="${name} JSR223 Timer" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//// Retrieve the countdown value from JMeter variables
//String countdownValue = vars.get(&quot;countdownValue&quot;)
//
//// Output the countdown value to the console
//log.info(&quot;Extracted countdown value: &quot; + countdownValue)

int waitTime = Integer.parseInt(vars.get(&quot;countdownValue&quot;));
return waitTime * 1000; // Convert seconds to milliseconds</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Timer>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="${name} Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${name} If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&apos;${countdownValue}&apos; == &apos;NOT_FOUND&apos;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="${name} If Debug Sampler" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cas redirect" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="service" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">service</stringProp>
                      <stringProp name="Argument.value">https://cas.hbsstg.org/cas/oauth2.0/callbackAuthorize?client_id=dashbird-cee.hbssims-dev.org&amp;redirect_uri=https%3A%2F%2Fdashbird-cee.hbssims-dev.org%2Fapi%2Fcas%2Foauth%2Fcallback%3Fsim%3Dc2t-cee-loadtest&amp;response_type=code&amp;client_name=CasOAuthClient</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="execution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">execution</stringProp>
                      <stringProp name="Argument.value">96b040f8-e325-469f-9642-b26fc15bbe64_ZXlKaGJHY2lPaUpJVXpVeE1pSXNJblI1Y0NJNklrcFhWQ0o5LnR3UHRHSnU2dGcwdUE3WHZDWTdMQ1dMVVNPS0RJdXpqMGJwRnlLZ3UxN2d5UEplOG11dmhXYWE2ZzE4ei1kdzFSSnBlVEl6Q05Vck93SFlsYUJjRGEya3pZX3d6aG9udVd1TkhWSks5QlljOFdHWDdSc2ZHZldVRktERzdEeW5NaURLYmJDaGVWSV8tYi1nR0xoRHpoZ01KUVgyUmxqUTZ5Nm5CRmVKVXRON1NYdGNzRmVpWUx6WE5PNU13NVVkbzFrZXBnVExJQmgzXzJqYklqdXExV1E4ZGp2ZVNZd0R5VDdJZGc5N3VBaUdPamMwQ2JIVVl4NkwtanVHRVc3d1RYWUM0a3dVWTNDUFBva1oxd29BakI1Yno4SFU4ZlZnanhMX0s4NGJiMVFvd19GeXhOemdRMDQtSlNhZFRGZjl4SE5abTBGd0JSQi1HRzlUMXZDMVQzTjZjU015Vnd2Y0c5QkFWUVR6bmZoQjl2clQwUnJaZEc5blBKaGstUjEydnBUc1hqb2FCbnUtMnV1Z0EwR3VNZTZxYUMtQjJzVC1FR25uNklOSFlGVmFIdmJFWC1hSkV6WnRQRWF0RjB2clVlZ1RKWnZtd2xLOGw3ZG1fNUo2ZFpRVFZjeFBPOWtlMEtHMm9RcllBdHctSGNDSDNGRG8tX0dZOWJScDBwMzdndFo2S2dhZ0lEakJ3NzJBU0JMRlE5TFk0dF95MlBOZFNVXzlMNU9Lc3FIUFhZWVVTWUk5cENyQkk1TUswTkpEYXhib0UwV3NSdXd3WlRoWTA5R2VWZFdXZ3BpUEEzaUx5bVU0SDJMVnJmRjE4WUlQanBySVV4YnBQaWZ0TGhmVi01b3dTMjhpUXU3TEthWHVVT29aR0pUTF95bHlxbUVvVHdXb0RhR1luQ2s0M29pbFNlMG5qeEJPUnNnamo1VXZGbjIwZWFuQnRmQkJYdGp1dFZ6WGVSUXh0YnZBTjc5RHYyTXBoRFZUaUJ3azkxekYwdGZPVGx3ajJlNkp0TW5YWkFoXzJELXRJbVZ0N1JWaFU0VzM3NGVXa0xILWl2QWhVYmMybktzUjVMZjRKZ0pSOTZSdURyYmgwaWpveHZzQnRmMDFKOEE1VzBTZFVMTG9jbXVuOU5XTGl0Y3J4NUlYbUxzcWh0M1dFbExIODVfSHI4ZWhkLVF2TzdaRFk3UVgzUWtsc2FQcmVoVVVlYkJrMGVaV2hYWS1NMlFlYzdHTnhRNURmTmw4SXpBaDFTc2RhUnRjcldqUFdTeFpDWmtiRGRqd29USUJCOWtFa2I5NEFMeWxPT0xDRVRFMS14VGpxRGg5WWdEalZockthWHZrTTRBMVNrM3h0RjRaczV3eHkyMWVqSjdpX2xabXc4WnRkODczMm1lbW9oTGlYbnY0Nm5rd09QTW5sdmZoRS1Ydngtd29sTG9fRFR2WmlESkRKWlZBWmpiSUFaa3J0bTVucE1EM3V6d2E0d2ptdG5fREkzR1pSTGk3VEYxM1BQVHhEMnhCc0I3RUZfM3hUX0M1eURERnJ5ZDVvN2hPYUVmMGpaOGN5ZVpJejlYbXlBaXB5RHp1elJDS0d2M2J5MUFGYlVzZ0d1Zk1pV1VPTXRoZHN2MS1STnhYU1M1cXFpdzRqOG4yVFBLeFg3OFJDcVNPVVN2djVaQm9zNFRhN0ZaMjZBR2t6U0Y2ZFRmTk1fMlRVTV9Ccko3Z1hPVkQ1d3NFNkpZTDRNcXllb1g2a2pucVg4MUNMZ3AtanVtOHVTZVZsVU9KeHFnbjhTcThKYU14OEh1R2F1TTdPYUxKTDBVQnZQX3F0MlNUZkt1R181ZlIzZ1plaFhscnVfbV9qRUpBOS1BdTVVMEZ5cGtOUHpxOXBRRGdCVzVZTElIZ0xlX3d5dVl5alJNOXcwOE44V3lkcWxlUTIzUkFzQWFOVUx4dFFnOW5pZTVqSUlqQlpGNF9DY1lDMjUwQjEzOHB2TkhibWNOb0R5b09IODc4TVlfYUJDVHJwb3lWeGNsOWRybmd2UFo2Ry0xbEYwVThOMHBieHNpVmJJQ0Zsc1diYzZRc0ZsakFqTnVLdUlFTVRnbFA2MkVmbUM5NnIxbFZfMVB6Nk1TZW1ONlJqcFFQTDlYaTBUNnZZaWlKOTFhVmhpeGRoTzg0X3F4eXhKTDJzRG1GbjZpd2IxbUtBUV91NnE0ZV9DcTRwb25yb2tHdjNnY1JQOGpBUngzckp2eHVzTmxRTlRER2c2bkxleDRaRzNXVC1CbUM1b1dVdVZxOTlkUkQ5aXEyNTNiUXB6VjAwUnl3M2MwcTQ2ZmFlbUZaeThzQWZWVVBwS0JhZlJTXzRrTE12c0hzZG14ZE01cm9JaFVqZVhVemg0bEc0X3p6TGFLamNTT2dJcEVPR3d3aXdkY3JOcVlUdVV4OTE1OVdNTmpBeXFhSzZETXVfd3pjSF85aFpZSVVvQzRRLWNkYlp2NU5UUXEtNjJpTVNObFQwNkItVTd3VWcxcUZPLXZWWlRaVnJuc0tMamRNOEtYb0x0bEZ1STlSSFJIXzJQN2toanhIUlV6S1YwbnFMTGxsTFZldUhZNXZMV05jRXJTUHhGdXBQTTEtTXl6bTZlLVdCTG1OWGZCUTZBcVctU1M3NzV4SldOdU5sMzhDUVRNVDVJTTUxQ0E1cC03TG9BbDZ0Zm9SZmlZTFRzOTltVjYxd19PWUhiQlp6TlJ3bGNIQ0JRVy1DRS1yN2p3Tno0Z25YYjE0TWRwVU1hdl8zQm50bUlkNndnQXR2cEpqaGkyaWtfTVg3ekJ1LVlOOTFwc3YtOHVLU2htdTRXSFlGeDdacG52alpiMF9zaFNhaE54NmN0N1VqSXR1QmFaY3RGQWlydEFEeGZoVlB3cDhXNmszZHB4dG0zZWNqTG9qRHYzSEsyd3hFSGJEVmxDZUFzVTVvNHJEclVieHlLWjg4SWs2aEdwck9PaWpReWRuVTQxYVBXcDBkeEdMUHFVU05Ob1pLLVVtcWtkeEtGcmR5cl84alUxX0E3dXNjYXBNWDl6ZUNieEhhNDlFd2JZclVGbTJySEJwZ2YwSThURlZ6cDBGN2NIcWxRc0NMeFowSDlnbWN5cTBIS1pNMUg3RFBiZ3U5UW5remZ4MWdfbnJscEpFTFVuOGN6QXBSRjlYZmQyZlNxZGI2OVVIb0pCTFN0VlVibVhKVzNOekdqaXNjVEhwNWF3djFlTllITjBnYm1NUHNVUE9GS1loZ2dwZHFNUXdzSlNVMy1xZ2tTenJ4MGNUb0Z5dEJDQ3pGSXNhM19mNFVIbFFLWWxobFRNWlZ5VWpnR2htU2FUUk5oWF9ic2FLLWo4QTE0V25ieFdoOTVtaVVjUVo1YTNjMFFRSlR1Ylo3RnFYbFQ5Y183a1lMd2x1dEVvbTNHUWtDVzNyV1N4SkU4N0pJUVQ0dHV2blJybDlJVHV6S1pIbmVTal83Tklsd1VKR0ZMTGd4Tm9WVlpzOEVST3NSM0h2LXA5YkJmbWhCa0tMRkRtR3B6aEE2Nmwza3NncWo5LU9Jd2ZIN0ZvX25tX2pSRElFZGF5d1pFNWlZVWNtX3QzMm8xV3BVR3BmZmRXYy1ya1ItYjRFRXR5MnZRbl80RXRZa2hBTXgxanliOE10emUxLVBhZlZjNXc4RE5yaENtSmhaWVl5dFBRUXNNeVFmbndOdFJvZDFEakpFV0hGYld4cFhfTUpPcHNsblRGaXpmWi1TakYyREJWUHc0UFFuSGtKVUY2a3JZc2JQM1VCZWRZNE12OGZjOVU0anl1THhTdDhnbzRCeWNxMHg4WFpVU0FSYnJVejFoZzVTWExidHJndU4xYy1ZRXh4bFFXYkZiNGFDWEY3TzR4MHBucEo5REtsWm5OZ0E1bFlRQlB5N2d2SWdpOW1GZGtVUElHMzZrM1NycHlxNnJvYjVDZUpRYUpsZk9MRHN1TjBhN1U0Um9VbWFVQ2hiOU8yZTd6VTR1ZmtONkJ2RENjcjY0ZWJZQkxGaDMzYktUTmtMWGtvRzFUdVl5R09ieUhtd3dQcHVKRm8zRkxYaWdPV2FsbEItbDVkZm9TQVowWGl3WHMySnItUlRlemVGLTVUNUVlVHRsVkF6YlFHSWc5OU1vaFQ0SEMwamc5TE5TQ041LUotb1Z4QUh4RDhwTndyOTRCMHU1amhSeTJ0QVVJaUpFRFRaQU9xY1BLUTk1b1dIRUtwUnpBaXV3ei13WkM5bzZsUHBRcTlhYVgwWEdwVGxGU3VEcFEzdEZMc1RKdTEyVnFOV3pzUGdnSzJMLWpyUjYzQUc1ZXdlYkNhVWctSW1xeE5wT09xYnBwUTJoeWladnFlOUpGUUlvNzF3XzZkLTZ0SG9wQ3l2ME5IRHZ4czZhS21Iejd1QkR0UGlHV3I5TW9zcHp0YVJqdDU4dFUxV2t1WmJrRWhjOElYRTlKTUJlQXA1Y1JtQk9kdGd1eUVRcW1kUG9ZN3REa2FGUGxtdGt5VWd2SE5fcnRzZi1yMDJzNmpXcXhEUDdPVmphbFRELVdMOXQzSE1wemJOU2xOXzRPU3dfcS12M3VaRHNMZTZBbDdfOG0yalBucEMwMVlyWUlEM2Q1dUF2ZFpLNk1EWkpiU0E5QllOUFJ1RDFFOVFUMEtTam4tT3J6TXppMnY5Rk11bi1DTWc3WURjOFVSTDZyc19pT0JIQ3gyNENoNWxuQnNJeWNrTThrY2YwelhiTGtLQWNoTjBrMktMLWdQR2dSOUJWQU5ITElmQ0hoN1VMQTNPMDQ1WXAxZXZQVG9VWW1lYVhFZHlLMFhTSkJLRXVqU0VBUEtBaDF2dkt6emVHcFZEQ1ZnMjRSYTJ3Uy1JVHQzM09Zc3FXRF8zc3hQNDZGLVVBYWxzWkN4bEdYNmdIZTVUQ1F2TlZkVFp1OVNTS3YwZjNuR1ZsdnQ2clRCckxydVZoRXlFZHJJeWpMOVVGSVFFbXhWaWR6bVdna28tOFZNUXhiMmg4YS1qd0drVzYzcl9ZWFdNUUlqZDBBb0lEcXpBSGVzbDdQRk5Wb0dveS1jdWt1S2pjQTNfVlUzV1ZKcEhlWkMtd3RhbEVtb3RKZFVJNWsxeUQ0Y2Z5QTF1clFLbzFtNHpMT281SXFDcmhqc1hBZDN2MFE4ZjlvZXduWHVoeEZEY3hVQlRtWmpZTW41a3plR3Etc3dTSU9oZjduc1BMVnBsUDV3TUhvWTQxaHVFOGRqRi1qcXdSekd6aVlmUl83Um9CbktpY3J5RFV0M0dJNWJvMjllUDRsNFhmeW5GWTlqUTF2b3Qwa0g3bGhpb1lLdnNqTmRaS0ZSVXdVS2Z5THZRRk9id0YxaE4wckJuOURfeGFYWmNvc1pjZ1ctMTJBS0xDaVhPaFYxNEttU2FoTkphajJxRTdzeUJBUkdrcG5RT0p2ZTdELVU4cGl6cV9JZHNqS2FVRmc1b0tnWXN6M3FjaU54dC1xX3I5ZjBNS0liTlZ2eFo5MHJBbUpNZGhMUUhTRDctYjRuY3B5QzB3Rzk3cUpSdFFhbVdtN2VoeVdRRWxySDJCX2VLejZqenN3MzdpWVV1S0RfZURSenpnRlJuaFZ2cW05MDVVNmtFRTluamxsLS1XempFUl9oV0RCcngtcUtPTzdJZnBsdGpvM3pETF9yOU4zMVVTVXJuZloxeXkxTWdxMlByQVZ1U0VMLUNVMXRObWVDdHVxSnY4Q1JKbTRvWFc1bFJsM0xlc2xyMEVuYUhvLThIbFBPa2pqRmJnS2ZtQUZKTVlCY2RLazkwNWJjTFY2Y19tUEEyeGZzaUFYZ2FoVTlKc1Jhek5DeFp6cE9EOE5yNGlPMVpIR0FlaEc2QWpiVmo1bHNjNGRramtxTUpVbU1oaWlDSW9MWlNvM0RiZ2V0eDY4bHZGMEJWdnhES1FlVGk5Z3picElHOXBCd211Tm5HSHhRYlJneVZTOVpCdk5Zb2VoQUVPeVU0MlBZenkxbGJmOGM5cDZrMExzblZzYmJQRzl3T25HRFhkYm9hNHNTQ1g2X0VzSlVhZENuUUZtRDFIMzRTaG9pVm5ZQWVGSXFIUHQ2S2NTVmxsREVCLW4wTHEzMmF5VUlhNUpUSGEtMTRzZGRKQ0JQRE52YWxPUGRBbVh2b2JRbHF0WXRKcU8tZC0tWUducUR3UVFnRXcxN09sVnRCSWNQbEdYZTQyNkx6SnBRZVJsak1vRU44WGJvZDBoN1RqS0hyWGxJeGpTaDI4MkNCMUdzLmlDTDd1ZGpTWDdqN01DeXN2c01EalVvZlpCTC1SOW9SY0xmMmhKVFRnYnVaNTJpajl6OFBOTXk3b2hMb2VTRTJuU3d0aVpXRjRueG02QjdLQW9RbGZn</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">password</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_eventId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">_eventId</stringProp>
                      <stringProp name="Argument.value">submit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="geolocation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">geolocation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">username</stringProp>
                      <stringProp name="Argument.value">${learners}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">cas/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">https://cas.hbsstg.org/cas/login?service=https%3A%2F%2Fcas.hbsstg.org%2Fcas%2Foauth2.0%2FcallbackAuthorize%3Fclient_id%3Ddashbird-cee.hbssims-dev.org%26redirect_uri%3Dhttps%253A%252F%252Fdashbird-cee.hbssims-dev.org%252Fapi%252Fcas%252Foauth%252Fcallback%253Fsim%253Dc2t-cee-loadtest%26response_type%3Dcode%26client_name%3DCasOAuthClient</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">0</stringProp>
                  <stringProp name="ConstantTimer.delay">0</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 25805 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                  <stringProp name="RegexExtractor.refname">token</stringProp>
                  <stringProp name="RegexExtractor.regex">token=([^&amp;]+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lifeconnect token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/dbd/login?t=${token}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">https://comingtoterms-cee.hbssims-dev.org/api/dbd/login?t=0d31547adab08d730da8f619df813f5a0ec2859fd6b0d0b396e691140856894c938d61100148f5792c161a8842eb816f6908bd0cbd8930c29cfbbef6890cf9dfd82da90b738c494ee90a9c3b01d213c91dd2c927c8557e3f3076e4959a6f982758f6d26b822b4986a0335843112dc7e8</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Disabled https://comingtoterms-cee.hbssims-dev.org/api/learner/1/cohort" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/learner/1/cohort</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="${name} Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">5</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename">C:\Users\mhaidar\OneDrive - Harvard Business School\Desktop\Simulations\Dashbird\Dashbird_Load_Test\August_November_2024\results\SummaryReport_results_${__time(yyyyMMdd-HHmmss)}_${numUsers}_users_${rampUp}_RampUp.csv</stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree-Errors" enabled="true">
              <boolProp name="ResultCollector.error_logging">true</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename">C:\Users\mhaidar\OneDrive - Harvard Business School\Desktop\Simulations\Dashbird\Dashbird_Load_Test\August_November_2024\results\SummaryReport_results_20240822-112646_15_users_0_RampUp.csv</stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Latest Script Thread Group" enabled="true">
        <stringProp name="ThreadGroup.num_threads">${numUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${name}" enabled="true">
            <stringProp name="TestPlan.comments">Transaction Controller</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${name} Dashbird CEE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/cas/oauth/start?sim=_nosimparam_</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re">^((?!.*\.(css|js|jpg|png|svg|gif|ico)).*)$</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="${name} Countdown Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">countdownValue</stringProp>
              <stringProp name="RegexExtractor.regex">onload=&quot;startCountdown\((\d+)\)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="${name} JSR223 Timer" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">int waitTime = Integer.parseInt(vars.get(&quot;countdownValue&quot;));
return waitTime * 1000; // Convert seconds to milliseconds</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Timer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="${name} Execution Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Execution</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;execution&quot; value=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="${name} Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${name} If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&apos;${countdownValue}&apos; == &apos;NOT_FOUND&apos;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="${name} If Debug Sampler" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${name} cas login" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="service" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">service</stringProp>
                      <stringProp name="Argument.value">https://cas.hbsstg.org/cas/oauth2.0/callbackAuthorize?client_id=dashbird-cee.hbssims-dev.org&amp;redirect_uri=https%3A%2F%2Fdashbird-cee.hbssims-dev.org%2Fapi%2Fcas%2Foauth%2Fcallback%3Fsim%3Dc2t-cee-loadtest&amp;response_type=code&amp;client_name=CasOAuthClient</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="execution" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">execution</stringProp>
                      <stringProp name="Argument.value">${Execution}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">password</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_eventId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">_eventId</stringProp>
                      <stringProp name="Argument.value">submit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="geolocation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">geolocation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">username</stringProp>
                      <stringProp name="Argument.value">${learners}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">cas/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="${name} Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">5</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree-Errors" enabled="true">
              <boolProp name="ResultCollector.error_logging">true</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename">C:\Users\mhaidar\OneDrive - Harvard Business School\Desktop\Simulations\Dashbird\Dashbird_Load_Test\August_November_2024\results\SummaryReport_results_${__time(yyyyMMdd-HHmmss)}_${numUsers}_users_${rampUp}_RampUp.csv</stringProp>
            </ResultCollector>
            <hashTree/>
            <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseCodesPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Codes per Second" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <longProp name="interval_grouping">1000</longProp>
              <boolProp name="graph_aggregated">false</boolProp>
              <stringProp name="include_sample_labels"></stringProp>
              <stringProp name="exclude_sample_labels"></stringProp>
              <stringProp name="start_offset"></stringProp>
              <stringProp name="end_offset"></stringProp>
              <boolProp name="include_checkbox_state">false</boolProp>
              <boolProp name="exclude_checkbox_state">false</boolProp>
            </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
